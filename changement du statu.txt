partie react js : 
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { FaSearch, FaShoppingCart, FaUser } from 'react-icons/fa';
import '../index.css';
import { useDispatch, useSelector } from 'react-redux';
import Modal from './Modal';
import Login from './Login';
import Register from './Register';
import { setSearchTerm } from '../Redux/ProductSlice';

function Navbar() {
  const [isModelOpen, setIsModelOpen] = useState(false);
  const [isLogin, setIsLogin] = useState(true);
  const [search, setSearch] = useState('');
  const [isUserLoggedIn, setIsUserLoggedIn] = useState(false);
  const [userName, setUserName] = useState(''); // Stocke le nom de l'utilisateur
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const products = useSelector((state) => state.cart.products);

  useEffect(() => {
    const verifyToken = async () => {
      const token = localStorage.getItem('token'); // Récupère le token du localStorage

      if (!token) {
        setIsUserLoggedIn(false);
        return;
      }

      try {
        const response = await fetch('http://votre-backend/api/verify-token', {
          method: 'GET',
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (response.ok) {
          const data = await response.json();
          setIsUserLoggedIn(true);
          setUserName(data.user.name); // Met à jour le nom de l'utilisateur
        } else {
          setIsUserLoggedIn(false);
        }
      } catch (error) {
        console.error('Erreur lors de la vérification du token:', error);
        setIsUserLoggedIn(false);
      }
    };

    verifyToken();
  }, []);

  const handleSearch = (e) => {
    e.preventDefault();
    dispatch(setSearchTerm(search));
    navigate('/filter-data');
  };

  const openSignUp = () => {
    setIsLogin(false);
    setIsModelOpen(true);
  };

  const openLogin = () => {
    setIsLogin(true);
    setIsModelOpen(true);
  };

  const handleLogout = () => {
    localStorage.removeItem('token'); // Supprime le token
    setIsUserLoggedIn(false);
  };

  return (
    <nav className="bg-white shadow-md">
      <div className="container mx-auto px-4 md:px-16 lg:px-24 py-4 flex justify-between items-center">
        <div className="text-lg font-bold">
          <Link to="/">Casquetty</Link>
        </div>
        <div className="relative flex-1 mx-4">
          <form onSubmit={handleSearch}>
            <input
              type="text"
              placeholder="Recherche de Produit"
              className="w-full border py-2 px-4 pr-10"
              onChange={(e) => setSearch(e.target.value)}
            />
            <FaSearch className="absolute top-1/2 right-3 transform -translate-y-1/2 text-red-500" />
          </form>
        </div>
        <div className="flex items-center space-x-4">
          <Link to="/cart" className="relative">
            <FaShoppingCart className="text-lg" />
            {products.length > 0 && (
              <span className="absolute top-0 text-xs w-3 left-3 bg-red-600 rounded-full flex justify-center items-center text-white">
                {products.length}
              </span>
            )}
          </Link>
          {isUserLoggedIn ? (
            // Composant affiché si l'utilisateur est connecté
            <div className="flex items-center space-x-2">
              <FaUser className="text-lg" />
              <span>Bonjour, {userName}</span>
              <button
                onClick={handleLogout}
                className="text-red-500 underline"
              >
                Déconnexion
              </button>
            </div>
          ) : (
            // Boutons affichés si l'utilisateur n'est pas connecté
            <button
              className="hidden md:block"
              onClick={() => setIsModelOpen(true)}
            >
              Login | Register
            </button>
          )}
          <button className="block md:hidden">
            <FaUser />
          </button>
        </div>
      </div>
      <div className="flex items-center justify-center space-x-10 py-4 text-sm font-bold">
        <Link to="/" className="hover:underline">
          Home
        </Link>
        <Link to="/shop" className="hover:underline">
          Shop
        </Link>
        <Link to="/" className="hover:underline">
          Contact
        </Link>
        <Link to="/" className="hover:underline">
          About
        </Link>
      </div>
      <Modal isModelOpen={isModelOpen} setIsModelOpen={setIsModelOpen}>
        {isLogin ? <Login openSignUp={openSignUp} /> : <Register openLogin={openLogin} />}
      </Modal>
    </nav>
  );
}

export default Navbar;


